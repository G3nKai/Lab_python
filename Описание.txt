–ó–¥–µ—Å—å —è —Ä–∞—Å–ø–∏—Å—ã–≤–∞—é –ø–æ —à–∞–≥–∞–º, —á—Ç–æ –¥–µ–ª–∞–ª:
1) –°–æ–∑–¥–∞–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–¥–µ—Å—å –∂–µ —Å–æ–∑–¥–∞–ª –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
python -m venv .venv
2) –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –æ–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä—è–º–æ –≤ –ø—Ä–æ–µ–∫—Ç
.venv\Scripts\activate.bat
3) –í –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fast api
python -m pip install "fastapi[standard]"


–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É —É–∂–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–æ–¥–∞ VS Code.

4) –°–ª–µ–¥—É–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FastApi, —Å–æ–∑–¥–∞–¥–∏–º main.py –∏ –∑–∞–ø—É—Å—Ç–∏–º –Ω–∞—à –ø—Ä–æ–µ–∫—Ç:
#main.py
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None

@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}


–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤–ø–∏—à–µ–º: fastapi dev main.py - –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω.

   FastAPI   Starting development server üöÄ
 
             Searching for package file structure from directories with __init__.py files
             Importing from D:\Programming\Projects\pythonLab
 
    module   üêç main.py
 
      code   Importing the FastAPI app object from the module with the following code:
 
             from main import app
 
       app   Using import string: main:app

    server   Server started at http://127.0.0.1:8000
    server   Documentation at http://127.0.0.1:8000/docs

       tip   Running in development mode, for production use: fastapi run

5) –£—Å—Ç–∞–Ω–æ–≤–∏–ª ORM - SQLAlchemy
pip install SQLAlchemy
6) –°–æ–∑–¥–∞—é database.py, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —Å—Ö–µ–º—É –ë–î. –°–æ–∑–¥–∞—é –≤ –Ω–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π.
#database.py
from sqlalchemy.orm import declarative_base

Base = declarative_base()
7) –°–æ–∑–¥–∞—é –º–æ–¥–µ–ª—å –ë–î person.py, –∞ —Ç–∞–∫–∂–µ PersonDTO –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö:
#person.py
import uuid
from sqlalchemy import Column, Integer, String
from src.Infrastructure.database import Base
from sqlalchemy.dialects.postgresql import UUID

class Person(Base):
    __tablename__ = "persons"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)
    name = Column(String(127), index=True, nullable=False)
    description = Column(String(511))
    phone = Column(String(20), index=True)
    email = Column(String(127), unique=True, index=True, nullable=False)
    address = Column(String(255), index=True)

#personDTO.py
from pydantic import BaseModel, EmailStr
from typing import Optional
import uuid

class PersonDTO(BaseModel):
    id: Optional[uuid.UUID]
    name: str
    description: Optional[str] = None
    phone: Optional[str] = None
    email: EmailStr
    address: Optional[str] = None

8) –ë—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostgreSQL:
#database.py
from sqlalchemy.orm import declarative_base
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql://postgres:QWERTY12345@localhost:5432/python_lab"

engine = create_engine(DATABASE_URL)
sessionLocal = sessionmaker(bind=engine)

Base = declarative_base()
9) –°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ Person:

#IPersonRepository.py
from abc import ABC, abstractmethod
from typing import List, Optional
from src.Domain.Models.person import Person
from src.Infrastructure.DTO.personDTO import PersonDTO

class IPersonRepository(ABC):
    @abstractmethod
    def get_person_all(self) -> List[Person]:
        pass
    @abstractmethod
    def get_person_by_id(self, id: int) -> Optional[Person]:
        pass
    @abstractmethod
    def delete_person_by_id(self, id: int) -> None:
        pass
    @abstractmethod
    def update_person_by_id(self, id: int, person: PersonDTO) -> Optional[Person]:
        pass
    @abstractmethod
    def create_person(self, person: PersonDTO) -> Person:
        pass
10) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫ PostgreSQL 
pip install psycopg2-binary
11) –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–µ –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
#create_db.py
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

conn = psycopg2.connect(
    dbname='postgres',
    user='postgres',
    password='QWERTY12345',
    host='localhost',
    port='5432'
)

conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
cursor = conn.cursor()

db_name = 'python_lab'

cursor.execute(f"SELECT 1 FROM pg_database WHERE datname='{db_name}'")
exists = cursor.fetchone()
if not exists:
    cursor.execute(f"CREATE DATABASE {db_name}")
    print(f"Database '{db_name}' created")
else:
    print(f"Database '{db_name}' already exists")

cursor.close()
conn.close()

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–¥, –∑–∞–ø—É—Å–∫–∞–µ–º: python -m src.Infrastructure.create_db
12) –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –ë–î
#main.py
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI
from contextlib import asynccontextmanager
from src.Infrastructure.database import Base, engine

@asynccontextmanager
async def lifespan(app: FastAPI):
    Base.metadata.create_all(bind=engine)
    print("Tables created")
    yield

app = FastAPI(lifespan=lifespan)
–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç uvicorn src.Application.main:app --reload
–ø—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω - —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î
13) 