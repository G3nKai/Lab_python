Здесь я расписываю по шагам, что делал:
1) Создал директорию и здесь же создал виртуальное окружение
python -m venv .venv
2) Активировал виртуальное окружение - оно позволит устанавливать пакеты локально прямо в проект
.venv\Scripts\activate.bat
3) В окружение устанавливаем fast api
python -m pip install "fastapi[standard]"


Продолжим работу уже в редакторе кода VS Code.

4) Следуая документации FastApi, создадим main.py и запустим наш проект:
#main.py
from typing import Union
from pydantic import BaseModel
from fastapi import FastAPI

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None

@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}


в терминал впишем: fastapi dev main.py - наш проект запущен.

   FastAPI   Starting development server 🚀
 
             Searching for package file structure from directories with __init__.py files
             Importing from D:\Programming\Projects\pythonLab
 
    module   🐍 main.py
 
      code   Importing the FastAPI app object from the module with the following code:
 
             from main import app
 
       app   Using import string: main:app

    server   Server started at http://127.0.0.1:8000
    server   Documentation at http://127.0.0.1:8000/docs

       tip   Running in development mode, for production use: fastapi run

5) Установил ORM - SQLAlchemy
pip install SQLAlchemy
6) Создаю database.py, который будет отвечать за схему БД. Создаю в нем базовый класс для моделей.
#database.py
from sqlalchemy.orm import declarative_base

Base = declarative_base()
7) Создаю модель БД person.py, а также PersonDTO которую мы будем использовать в запросах:
#person.py
import uuid
from sqlalchemy import Column, Integer, String
from Infrastructure.database import Base
from sqlalchemy.dialects.postgresql import UUID

class Person(Base):
    __tablename__ = "persons"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)
    name = Column(String(127), index=True, nullable=False)
    description = Column(String(511))
    phone = Column(String(20), index=True)
    email = Column(String(127), unique=True, index=True, nullable=False)
    address = Column(String(255), index=True)

#personDTO.py
from pydantic import BaseModel, EmailStr
from typing import Optional
import uuid

class PersonDTO(BaseModel):
    id: Optional[uuid.UUID]
    name: str
    description: Optional[str] = None
    phone: Optional[str] = None
    email: EmailStr
    address: Optional[str] = None

8) Было настроено подключение к БД PostgreSQL:
#database.py
from sqlalchemy.orm import declarative_base
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql://postgres:QWERTY12345@localhost:5432/python_lab"

engine = create_engine(DATABASE_URL)
sessionLocal = sessionmaker(bind=engine)

Base = declarative_base()
9) Создан интерфейс, который будет использоваться для реализации CRUD операций над Person:

#IPersonRepository.py
from abc import ABC, abstractmethod
from typing import List, Optional
from Domain.Models.person import Person
from Infrastructure.DTO.personDTO import PersonDTO

class IPersonRepository(ABC):
    @abstractmethod
    def get_person_all(self) -> List[Person]:
        pass
    @abstractmethod
    def get_person_by_id(self, id: int) -> Optional[Person]:
        pass
    @abstractmethod
    def delete_person_by_id(self, id: int) -> None:
        pass
    @abstractmethod
    def update_person_by_id(self, id: int, person: PersonDTO) -> Optional[Person]:
        pass
    @abstractmethod
    def create_person(self, person: PersonDTO) -> Person:
        pass